Scenery3d - Walkable 3D Models as foreground in Stellarium!
=============================================================

Georg Zotti, Georg.Zotti@univie.ac.at
http://astrosim.univie.ac.at

Have you ever wished to be able to walk through Stonehenge or other
building structures described as being constructed with astronomical
orientations in mind, and experience such orientations in 3D?

The Stellarium Scenery3d plugin, developed for the Astrosim project by
Simon Parzer and Peter Neubauer from Vienna University of Technology
as student work, allows you to see 3D models combined with the
excellent representation of a sky simulation. You can walk around,
check for (or demonstrate) possible astronomical alignments of ancient
architecture, see sundials in action, etc.

You activate the plugin with the "circular enclosure" button at screen
bottom or by pressing [Ctrl+3]. The other button with circular
enclosure and tool icon (or [Ctrl+Shift+3]) opens the settings
dialog. Once loaded and displaying, you can walk around pressing [Ctrl]
plus cursor keys. Change eye height with [Ctrl]+[PgUp]/[PgDn]
keys. Adding [Shift] key increases speed by 10, [Alt] by 5 (both:
50!). If you release [Ctrl] before the cursor key, animation will
continue. (Press [Ctrl]+any cursor key to stop.)

Press [Ctrl+Space] to toggle shadow display. Note that currently
textures are not displayed when shadow map is active.

TBD: Improve ShadowMap (MW?)



Getting your Google Sketchup models into Stellarium
====================================================

You can probably use several modeling programs to build your models, 
a nice and cost-free one is Google Sketchup.  The model format 
supported in Scenery3d is OBJ, which is not a native export format
for the standard version of Google Sketchup. If you are not willing to
afford Sketchup Pro, you have to find another way to export a textured
OBJ model. One good exporter is available in the Kerkythea renderer
project available at <http://www.kerkythea.net/joomla/>. 

Deselect any selection, then export your model to the Kerkythea XML
format with settings Yes-Yes-No-No-No (Or, with selection enabled,
make sure settings are No-Yes-Yes-No-No-No).  You do not have to
launch Kerkythea. Then, use the KT2OBJ converter to create an OBJ.
You can delete the XML after the conversion.  Note that some texture
coordinates may not be exported correctly.

Unfortunately, the OBJ and Material loader does not support texture
filenames with spaces and special characters.  You may have to rename
the materials (also "Google Earth Snapshot", e.g. into
Google_Earth_Snapshot") and edit the MTL file to reflect those
changes.

Working alternative: ObjExporter.rb, export with settings 0xxx00. This
will not create a TX... folder but dump all textures in the same
directory as the OBJ and MTL files. Unfortunately, again some texture
coordinates seem to be bad. Also, it swaps Y/Z coordinates, therefore
you will have to add a key to the config file, see below. Other
exporters may also provide coordinates in any order of X, Y, Z - all
those can be properly configured.

The walkaround in your scene can use a ground level (piece of terrain)
on which the observer can walk. The observer eye will always stay "eye height" above
ground. Currently, there is no collision detection with walls
implemented, so you can easily walk through walls, or jump on high
towers, if their platform or roof is exported in the ground layer. If
your model has no ground, walk will be on the highest surface of the scenery layer.
If you use the special name NULL as ground layer, walk will be above a zero-height level.

Technically, you should export your model twice. Once, just the
ground plane, i.e. where you will walk. Of course, for a temple or
other building, this includes its socket above soil, and any steps.
This plane is required to compute eye position above ground. Note that
it is not possible to walk in several floors of a building, or in a
multi-plane staircase. You may have to export several "ground" planes
and configure several scenery directories for those rare cases.

The second export includes all model parts, and will be used for
rendering. Of course, this requires the ground plane again, but also
all building elements, walls, roofs, etc. 

If you have not done so by yourself, it is recommended to separate
ground and buildings into Sketchup layers in order to easily switch
the model to the right state prior to exporting.

Name recommendations: 
<Temple>.skp        Name of a Sketchup Model file. 
                    (The "<>" brackets signal "use your own name here!")
<Temple>_ground.obj Ground layer
<Temple>.obj        Model in OBJ format. 

OBJ export will also create folders TX_<Temple> and
TX_<Temple>_ground. You can delete the TX_<Temple>_ground folder, 
<Temple>_ground.obj is just used to compute vertical height.

Put the OBJ, MTL and TX directories into a directory
<USERDATA>/Stellarium/modules/scenery3d/<Temple>, and add a text file
called "scenery3d.ini" (This name is fixed!) with content like this:

==================
[model]
name=<Temple>
landscape=<landscapename>    Name of an available Stellarium landscape.
                             This is required, because a landscape file 
                             includes geographical coordinates.
                             The landscape also provides the background 
                             image of your scenery.
ground=<Temple>_ground.obj   Optional: Ground plane. (NULL for zero altitude.)
scenery=<Temple>.obj         The complete model, including visible ground.
author=<Your Name yourname@yourplace.com>
copyright=<Copyright Info>
description=<Description>    What you can see in this scenery, what to 
                             look for, historical context, etc.
obj_order=XZY                If you have used an exporter which swaps Y/Z coordinates, use this key. 
                             Default: XYZ, options: XZY, YZX, YXZ, ZXY, ZYX
[coord]
orig_x=<double> /* East-West-distance to zone central meridian, Meter */
orig_y=<double> /* North distance from Equator, Meter */
orig_z=<double> /* Altitude above Mean Sea Level of southwest corner */
rot_z=<double>  /* Meridian convergence, degrees */

==========================

Entries in the [coord] section are optional, default to zero, but are
required if you want to display meaningful eye coordinates in your
survey (world) coordinate system, like UTM or Gauss-Krueger.  orig is the
south-western edge of the ground plane. OBJ export resets this edge to
x=y=0.  Typically, digital elevation models are survey-grid aligned, so true
geographical north will not coincide with grid north, the difference
is known as meridian convergence. This amount can be given in rot_z
(degrees), so that your model will be aligned with True North.



