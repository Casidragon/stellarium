Scenery3d - Walkable 3D Models as foreground in Stellarium!
=============================================================

Georg Zotti, Georg.Zotti@univie.ac.at
http://astrosim.univie.ac.at

Have you ever wished to be able to walk through Stonehenge or other
building structures described as being constructed with astronomical
orientation in mind, and experience such orientation in 3D?

The Stellarium Scenery3d plugin, developed for the Astrosim project by
Simon Parzer and Peter Neubauer from Vienna University of Technology
as student work and completed by Georg Zotti with help from Michael
Wimmer, allows you to see architectural 3D models embedded in a
landscape combined with the excellent representation of a sky
simulation. You can walk around, check for (or demonstrate) possible
astronomical alignments of ancient architecture, see sundials in
action, etc.

You activate the plugin with the "circular enclosure" button at screen
bottom or by pressing [Ctrl+3]. The other button with circular
enclosure and tool icon (or [Ctrl+Shift+3]) opens the settings
dialog. Once loaded and displaying, you can walk around pressing [Ctrl]
plus cursor keys. Change eye height with [Ctrl]+[PgUp]/[PgDn]
keys. Adding [Shift] key increases speed by 10, [Alt] by 5 (both:
50!). If you release [Ctrl] before the cursor key, animation will
continue. (Press [Ctrl]+any cursor key to stop.)

[Ctrl-K] toggles coordinate display. If you have georeferenced models
in a true geographical coordinate grid, e.g. UTM or Gauss-Krueger, you
will especially like this. Display shows Easting, Northing, Altitude of
ground, and eye height above ground.

Press [Ctrl+Space] to toggle shadow display. Note that currently
textures are not displayed when shadow map is active.

TBD: Improve ShadowMap (MW?)


You can influence rendering quality, but also speed, with 2 config
variables in the global config.ini:

[Scenery3d]
cubemapSize                         = 2048
shadowmapSize                       = 4096

Use cubemapSize=0 to switch off this feature, but you will be limited
to perspective projection in this case.



Getting your Google Sketchup models into Stellarium
====================================================

You can use several modeling programs to build your models, 
a nice and cost-free one is Google Sketchup.  The model format 
supported in Scenery3d is OBJ, which is not a native export format
for the standard version of Google Sketchup. If you are not willing to
afford Sketchup Pro, you have to find another way to export a textured
OBJ model. 

One good exporter is available in the Kerkythea renderer project
available at <http://www.kerkythea.net/joomla/>.  You need SU2KT 3.17
or better, and KT2OBJ 1.1.0 or better.  Deselect any selection, then
export your model to the Kerkythea XML format with settings
Geometry:Yes-Lights:Yes-Clay:No-Photomatched:Yes-DefaultUVs:No-Instanced:No
(Or, with selection enabled, make sure settings are
No-Yes-Yes-No-Yes-No-No).  You do not have to launch Kerkythea. Then,
use the KT2OBJ converter to create an OBJ.  You can delete the XML
after the conversion.  Note that some texture coordinates may not be
exported correctly. The setting Photomatched:Yes seems now to have
corrected this issue, esp. with distorted/manually shifted textures.

Working alternative: ObjExporter.rb by Honing.  Here, export with
settings 0xxx00. This will not create a TX... folder but dump all
textures in the same directory as the OBJ and MTL
files. Unfortunately, this time some material assignments seem to be
bad. Also, it swaps Y/Z coordinates, therefore you will have to add a
key to the config file, see below. Other exporters may also provide
coordinates in any order of X, Y, Z - all those can be properly
configured.

Recently, another free OBJ exporter has been made available by user TIG.
OBJexporter. However, as of version 1.2 it still has bad texture coordinates.

Yet another exporter, su2objmtl, does also not provide good texture
coordinates and cannot be recommended.


On reasonably good hardware (NVidia M9800 GTS), models up to 100.000
triangles are fluent, up to 250.000 are still "interactive".  If
display is too slow, switch to perspective projection. All other
projections require sixfold effort! If your graphics hardware does not
support a certain required OpenGL extension, perspective projection is
used automatically, and switched back once you switch off the plugin.

The walkaround in your scene can use a ground level (piece of terrain)
on which the observer can walk. The observer eye will always stay "eye height" above
ground. Currently, there is no collision detection with walls
implemented, so you can easily walk through walls, or jump on high
towers, if their platform or roof is exported in the ground layer. If
your model has no ground, walk will be on the highest surface of the scenery layer.
If you use the special name NULL as ground layer, walk will be above a zero-height level.

Technically, you should export your model twice. Once, just the
ground plane, i.e. where you will walk. Of course, for a temple or
other building, this includes its socket above soil, and any steps.
This plane is required to compute eye position above ground. Note that
it is not possible to walk in several floors of a building, or in a
multi-plane staircase. You may have to export several "ground" planes
and configure several scenery directories for those rare cases.

The second export includes all model parts, and will be used for
rendering. Of course, this requires the ground plane again, but also
all building elements, walls, roofs, etc. 

If you have not done so by yourself, it is recommended to separate
ground and buildings into Sketchup layers in order to easily switch
the model to the right state prior to exporting.

Name recommendations: 
<Temple>.skp        Name of a Sketchup Model file. 
                    (The "<>" brackets signal "use your own name here!")
<Temple>_ground.obj Ground layer, if different from Model file. 
<Temple>.obj        Model in OBJ format. 

OBJ export will also create folders TX_<Temple> and
TX_<Temple>_ground. You can delete the TX_<Temple>_ground folder, 
<Temple>_ground.obj is just used to compute vertical height.

Put the OBJ, MTL and TX directories into a directory
<USERDATA>/Stellarium/modules/scenery3d/<Temple>, and add a text file
called "scenery3d.ini" (This name is fixed!) with content described below.

A Sketchup plugin "Write scenery3d.ini for Stellarium" will write this
file. Locate the directory where the .obj file(s) reside(s), and store
scenery3d.ini there. If you have other modelers and models, or if your
model is not georeferenced in Sketchup, write the file yourself and
use the following format.

TBD GZ: Write this Sketchup export plugin!

==================
[model]
name=<Temple>                Unique ID within all models in scenery3d directory.
                             Recommendation: use directory name.
landscape=<landscapename>    Name of an available Stellarium landscape.
                             This is required, because a landscape file 
                             includes geographical coordinates.
                             The landscape also provides the background 
                             image of your scenery.
scenery=<Temple>.obj         The complete model, including visible ground.
ground=<Temple>_ground.obj   Optional: separate ground plane. (NULL for zero altitude.)
author=<Your Name yourname@yourplace.com>
copyright=<Copyright Info>
description=<Description>    What you can see in this scenery, what to 
                             look for, historical context, etc.
obj_order=XYZ                If you have used an exporter which swaps Y/Z coordinates, use this key. 
                             Default: XYZ, options: XZY, YZX, YXZ, ZXY, ZYX

; OPTIONAL SECTION, Required if coord/convergence_angle==from_grid; else location is inherited from landscape.
[location]
planet = Earth
latitude = +48d31'30.4"      ; Required if coord/convergence_angle==from_grid
longitude = +16d12'25.5"     ; "--"
altitude =from_model|<int>   ; altitude (for astronomical computations) can be computed from the model!
light_pollution = 1
atmospheric_extinction_coefficient = 0.2
display_fog = 0
atmospheric_temperature = 10.0
atmospheric_pressure = 1013.0


[coord]

grid_name=<string>  /* name of grid coordinates, e.g. "UTM 33 U (WGS 84)", "Gauss-Krueger M34" or "Relative to <Center>" 
                       This name is only displayed, there is no evaluation of its contents */

; The following describe the offset of the model coordinates relative to coordinates in a geographic grid, like Gauss-Krüger.
orig_E=<double> /* (Easting)  East-West-distance to zone central meridian, Meter */
orig_N=<double> /* (Northing) North distance from Equator, Meter */
orig_H=<double> /* (Height)   Altitude above Mean Sea Level of model origin */

;Typically, digital elevation models are survey-grid aligned, so true
;geographical north will not coincide with grid north, the difference
;is known as meridian convergence. This amount can be given in convergence_angle
;(degrees), so that your model will be aligned with True North.

convergence_angle="from_grid"|<double> /* Meridian convergence, degrees. Defaults to 0. */
grid_meridian=<double>               /* Central meridian of grid zone, e.g. for UTM or Gauss-Krüger. 
                                        Only required to compute convergence angle if convergence_angle="from_grid" */


zero_ground_height=<double> /* height of terrain outside OBJ, or if ground=NULL. Allows smooth approach from outside. 
                               Default-> location.altitude if available, or last fallback, min. height of model.  */

start_E=<double> /* Coordinates to be set after loading the scenery.  */
start_N=<double> /* default->center of boundingbox. */
start_H=<double> /* only meaningful if ground==NULL, else H is derived from ground */
start_Eye=<double> /* default: 1.65m */
start_az_alt_fov=<az_deg>,<alt_deg>,<fov_deg> /* initial view direction and field of view.*/

; It is advisable to use the grid coordinates of the location of the panoramic photo ("landscape") as start_.. coordinates, 
and some carefully selected start_az_alt_fov in case of certain view corriors (temple axes, ...).

;TODO: IMPLEMENT ALTERNATIVE TO ORIG_..: Regardless of what model coordinates say, 
;                                        specify minimal coordinates grid coordinates, 
;                                        i.e. the south-east corner, and lowest altitude.
;                                        This relates the bounding box of the unrotated model to the grid coordinates.
; This has low priority, currently Sketchup models work fine.
;min_E=<double> /*  */
;min_N=<double>
;min_H=<double>




==========================

Entries in the [coord] section are optional, default to zero, but are
required if you want to display meaningful eye coordinates in your
survey (world) coordinate system, like UTM or Gauss-Krueger.  

orig_... coordinates are offsets if you have model coordinates around an origin in the model.
If you have your model specified in world coordinates, do not specify orig_... data, but please add start_... data. 



start_... coordinates are world coordinates to be used after loading a scenery. Default: set to center coordinates of model bounding box.




