Getting your Google Sketchup models into Stellarium
====================================================

The Stellarium scenery3d plugin allows you to see 3D models combined
with the excellent representation of a sky smulation. You can walk
around, check for (or demonstrate) possible astronomical alignments of
ancient architecture, etc.

The model format supported is OBJ, which is not a native export format
for the standard version of Google Sketchup. If you are not willing to
afford Sketchup Pro, you have to find another way to export a textured
OBJ model. One good exporter is available in the Kerkythea renderer
project available at <http://www.kerkythea.net/joomla/>. Download the 
Export your model to the Kerkythea XML format with settings
Yes-Yes-No-No-No.  You do not have to launch Kerkythea. Then, use the
KT2OBJ converter to create an OBJ.  You can delete the XML after the
conversion.

Alternative: ObjExorter.rb, export with settings 0xxx00. This will not
create a TX... folder but dump all textures in the same directory as
the OBJ and MTL files.

TBD: WHICH WORKS BETTER? TEXTURE COORDS? 

The walkaround in your scene requires a ground (piece of terrain)
without overlap. The observer eye will always stay "eye height" above
ground. Currently, there is no collision detection implemented, so you
can easily walk through walls.

Technically, you have to export your model twice. Once, just the
ground plane, i.e. where you will walk. Of course, for a temple or
other building, this includes its socket above soil, and any steps.
This plane is required to compute eye position above ground.

The second export includes all model parts, and will be used for
rendering. Of course, this requires the ground plane again, but also
all building elements, walls, roofs, etc. 

If you have not done so by yourself, it is recommended to separate
ground and buildings into Sketchup layers in order to easily switch
the model to the right state prior to exporting.

Name recommentations: 
<Temple>.skp        Name of a Sketchup Model file. 
                    (The "<>" brackets signal "use your own name here!")
<Temple>_ground.obj Ground layer
<Temple>.obj        Model in OBJ format. 

OBJ export will also create folders TX_<Temple> and
TX_<Temple>_ground. You can delete the TX_<Temple>_ground folder, 
<Temple>_ground.obj is just used to compute vertical height.

Put the OBJ, MTL and TX directories into a directory
<USERDATA>/Stellarium/modules/scenery3d/<Temple>, and add a text file
called "scenery3d.ini" (This name is fixed!) with content like this.

==================
[model]
name=<Temple>
landscape=<landscapename>    Name of an available Stellarium landscape.
                             This is required, because a landscape file 
                             includes geographical coordinates.
                             The landscape also provides the background 
                             image of your scenery.
ground=<Temple>_ground.obj   Ground plane.
scenery=<Temple>.obj         The complete model, including visible ground.
author=<Your Name yourname@yourplace.com>
copyright=<Copyright Info>
description=<Description>    What you can see in this scenery, what to 
                             look for, historical context, etc.
[coord]
orig_x=<double> /* East-West-distance to zone central meridian, Meter */
orig_y=<double> /* North distance from Equator, Meter */
orig_z=<double> /* Altitude above Mean Sea Level of southwest corner */
rot_z=<double>  /* Meridian convergence, degrees */

==========================

Entries in the [coord] section are optional, default to zero, but are
required if you want to display meaningful eye coordinates in your
survey (world) coordinate system, like UTM or Gauss-Krueger.  orig is the
south-western edge of the ground plane. OBJ export resets this edge to
x=y=0.  Typically, digital elevation models are survey-grid aligned, so true
geographical north will not coincide with grid north, the difference
is known as meridian convergence. This amount can be given in rot_z
(degrees), so that your model will be aligned with True North.



